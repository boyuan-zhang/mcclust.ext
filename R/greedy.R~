### Compute optimal partition that minimizes the posterior expected loss,
### by performing greedy search: at every iteration, consider the L-closest 
### ancestors and the L-closest descendents

greedy=function(psm,cls.draw=NULL,loss=NULL,start.cl=NULL,maxiter=NULL,L=NULL,suppress.comment=T){

	if(any(psm !=t(psm)) | any(psm >1) | any(psm < 0) | sum(diag(psm)) != nrow(psm) ){
	stop("psm must be a symmetric matrix with entries between 0 and 1 and 1's on the diagonals")}

	if(loss=="VI" & is.null(cls.draw)) stop("cls.draw must be provided if loss=''VI''")

	n=nrow(psm)
	if(is.null(loss)) loss="VI.lb"
	if(is.null(start.cl)) start.cl=1:n
	if(is.null(maxiter)) maxiter=2*n
	if(is.null(L)) L=2*n

	EVI_lb_local=function(c){
		f=0
		for(i in 1:n){
			ind=(c==c[i])
			f=f+(log2(sum(ind))+log2(sum(psm[i,]))-2*log2(sum(ind*psm[i,])))/n
		}
		return(f)
	}
	EVI_local=function(c){
		M=nrow(cls.draw)
		f=0
		for(i in 1:n){
			ind=(c==c[i])
			f=f+log2(sum(ind))
			for(m in 1:M){
				indm=(cls.draw[m,]==cls.draw[m,i])
				f=f+(log2(sum(indm))-2*log2(sum(ind*indm)))/M
			}
		}
		f=f/n
		return(f)
	}
	EBL_local=function(c){
		f=0
		for(i in 1:n){
			f=f+sum(abs((c[i]==c)-psm[i,]))
		}
		f=f/(n^2)
		return(f)
	}  

	#Extra functions
	rep2=function(x){return(rep(x[1],x[2]))}

	rep3=function(ind,x){
		l=length(x)
		return(x[ind:l])
	}

	c_combine=function(c_ext){
		c=c_ext[1:n]
		i=c_ext[n+1]
		j=c_ext[n+2]
		c[c==i|c==j]=min(i,j)
		c[c>max(i,j)]=c[c>max(i,j)]-1
		return(c)
	}

	choose_sets=function(S,s){
		sl=matrix(1:(S-s+1),(S-s+1),1)
		while(dim(sl)[2]<s){
		#add another dimension to sl
			l=dim(sl)[2]
			sl_new=cbind(t(matrix(sl[1,],l,S-s+l+1-sl[1,l])),(sl[1,l]+1):(S-s+l+1))
			m=dim(sl)[1]
			for(i in 2:m){
				toadd=cbind(t(matrix(sl[i,],l,S-s+l+1-sl[i,l])),(sl[i,l]+1):(S-s+l+1))
				sl_new=rbind(sl_new,toadd)
			}
			sl=sl_new
		}
		return(sl)
	}

	split_nj=function(cj_ind,n,k){
		cj=cj_ind[1:n]
		ind=cj_ind[(n+1):length(cj_ind)]
		cj[ind]=k+1
		return(cj)
	}

	dist_merge_ij=function(ni,nj){
		d=0
		if(loss=="VI.lb"||loss=="VI"){d=((ni+nj)/n)*log2((ni+nj)/n)-(ni/n)*log2(ni/n)-(nj/n)*log2(nj/n)}
		if(loss=="Binder"){d=((ni+nj)^2-(ni)^2-(nj)^2)/(n^2)}
		return(d)
	}
	dist_split_i=function(x,ni){
		d=0
		if(loss=="VI.lb"||loss=="VI"){d=(ni/n)*log2(ni/n)-(x/n)*log2(x/n)-((ni-x)/n)*log2((ni-x)/n)}
		if(loss=="Binder"){d=((ni)^2-(x)^2-(ni-x)^2)/(n^2)}
		return(d)
	}

	#Function which given a configuration, finds the L closests configurations and
	# selects the one with the smallest EBL
	local_explore=function(c_star,val_star){
		k=max(c_star)
		nj=rep(0,k)
		for(j in 1:k){
			nj[j]=sum(c_star==j)
		}
		snj_ind=list()
		unj=unique(nj)
		unj=sort(unj)
		U=length(unj)
		lnj=rep(0,U)
		for(i in 1:U){
			snj_ind[[i]]=which(nj==unj[i])
			lnj[i]=length(snj_ind[[i]])
		}
		c_opt=c_star
		val_opt=val_star
		#Merge two clusters
		#Compute distance of merge any two clusters
		if(k>1){
			m_ind=1:U
			if(lnj[1]==1){m_ind=m_ind[-1]}
			d_1=apply(matrix(unj[m_ind],length(m_ind),1),1,dist_merge_ij,nj=unj[1])
			d_mat=rbind(d_1,rep(1,length(m_ind)),m_ind)
			if((U-(lnj[U]==1))>1){
				for(i in 2:(U-(lnj[U]==1))){
					m_ind=i:U
					if(lnj[i]==1){m_ind=m_ind[-1]}
					d_i=apply(matrix(unj[m_ind],length(m_ind),1),1,dist_merge_ij,nj=unj[i])
					d_mat=cbind(d_mat,rbind(d_i,rep(i,length(m_ind)),m_ind))
				}
			}
			sd=sort(d_mat[1,],index.return=T)
			d_mat=matrix(d_mat[,sd$ix],nrow=3)
			colind=1
			l=0
			ub=min(L,choose(k,2))
			while(l<ub){
				i=d_mat[2,colind]
				h=d_mat[3,colind]
				if(i!=h){
					li=length(snj_ind[[i]])
					lh=length(snj_ind[[h]])
					reps=li*lh
					v1=snj_ind[[i]]%x%rep(1,lh)
					v2=rep(1,li)%x%snj_ind[[h]]
				}
				if(i==h){
					reps=choose(lnj[i],2)
					v1=unlist(apply(cbind(snj_ind[[i]][-lnj[i]],(lnj[i]-1):1),1,rep2))
					v2=unlist(apply(matrix(2:lnj[i],lnj[i]-1,1),1,rep3,x=snj_ind[[i]]))
				}
				#Create matrix of partitions
				c_p=t(matrix(c_star,n,reps))
				c_p_ext=cbind(c_p, v1,v2)
				c_p=t(apply(c_p_ext,1,c_combine))
				#Compute loss
				val_p=rep(0,nrow(c_p))
				if(loss=="VI.lb"){val_p=apply(c_p,1,EVI_lb_local)}
				if(loss=="VI"){val_p=apply(c_p,1,EVI_local)}
				if(loss=="Binder"){val_p=apply(c_p,1,EBL_local)}
				if(min(val_p)<val_opt){
					min_ind=which.min(val_p)
					c_opt=c_p[min_ind,]
					val_opt=val_p[min_ind]
				}
				#Update l and colind
				colind=colind+1
				l=l+reps
			}
		}
		#Spliting two clusters
		#Compute distance of splitting any clusters
		if(k<n){
			sind=1+(unj[1]==1)
			m_ind=1:floor(unj[sind]/2)
			d_1=apply(matrix(m_ind,length(m_ind),1),1,dist_split_i,ni=unj[sind])
			d_mat=rbind(d_1,rep(sind,length(m_ind)),m_ind)
			numsp=apply(matrix(m_ind,length(m_ind),1),1,choose,n=unj[sind])
			if((unj[sind]%%2)==0){numsp[length(numsp)]=numsp[length(numsp)]/2}
			numsp=sum(numsp)*lnj[sind]
			if(sind<U){
				for(i in (sind+1):U){
					m_ind=1:floor(unj[i]/2)
					d_i=apply(matrix(m_ind,length(m_ind),1),1,dist_split_i,ni=unj[i])
					d_mat=cbind(d_mat,rbind(d_i,rep(i,length(m_ind)),m_ind))
					numsp=c(numsp,apply(matrix(m_ind,length(m_ind),1),1,choose,n=unj[i]))
					if((unj[i]%%2)==0){numsp[length(numsp)]=numsp[length(numsp)]/2}
					numsp=numsp[1]+sum(numsp[-1])*lnj[i]
				}
			}
			sd=sort(d_mat[1,],index.return=T)
			d_mat=matrix(d_mat[,sd$ix],nrow=3)
			colind=1
			l=0
			ub=min(L,numsp)
			while(l<ub){
				i=d_mat[2,colind]
				nj_new=d_mat[3,colind]
				ind_sets=choose_sets(unj[i],nj_new)
				if(nj_new==(unj[i]/2)){ind_sets=matrix(ind_sets[1:(dim(ind_sets)[1]/2),],dim(ind_sets)[1]/2,dim(ind_sets)[2])}
				for(j in 1:lnj[i]){
					c_p=t(matrix(c_star,n,dim(ind_sets)[1]))
					c_p[,c_star==snj_ind[[i]][j]]=t(apply(cbind(matrix(c_p[,c_star==snj_ind[[i]][j]],dim(c_p)[1],unj[i]),ind_sets),1,split_nj,n=unj[i],k=k))
					#Compute expected loss
					val_p=rep(0,nrow(c_p))
					if(loss=="VI.lb"){val_p=apply(c_p,1,EVI_lb_local)}
					if(loss=="VI"){val_p=apply(c_p,1,EVI_local)}
					if(loss=="Binder"){val_p=apply(c_p,1,EBL_local)}
					if(min(val_p)<val_opt){
						min_ind=which.min(val_p)
						c_opt=c_p[min_ind,]
						val_opt=val_p[min_ind]
					}
				}
				colind=colind+1
				l=l+dim(ind_sets)[1]*lnj[i]
			}
		}
		return(list(c_star=c_opt,val_star=val_opt))
	}

	#Start at last
	c_star=start.cl
	val_star=0
	if(loss=="VI.lb") val_star=EVI_lb_local(c_star)
	if(loss=="VI") val_star=EVI_local(c_star)
	if(loss=="Binder") val_star=EBL_local(c_star)

	it=1
	stop_ind=F
	while((it<maxiter)&(!stop_ind)){
		opt=local_explore(c_star,val_star)
		if(opt$val_star==val_star){
			stop_ind=T
		}
		else{
			val_star=opt$val_star
			c_star=opt$c_star
			it=it+1
			if(!suppress.comment){cat(paste("Iteration=",it," k=",max(c_star), " Loss=",round(val_star,4),"\n"))}
		}
	}

output=list(cl=c_star,value=val_star,iter.greedy=it)
return(output)
}
